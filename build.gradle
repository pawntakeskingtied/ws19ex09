/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/custom_plugins.html
 */
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.spotbugs:spotbugs-gradle-plugin:3.0.0"
    }
}

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id "com.github.spotbugs" version "3.0.0"
    id 'java'
}

apply plugin: "com.github.spotbugs"
apply plugin: 'checkstyle'

checkstyle {
    toolVersion = '8.28'
    configFile file("${project.rootDir}/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/checkstyle-suppressions.xml").absolutePath
}

project.afterEvaluate {
    build.dependsOn 'checkstyle'
}

task checkstyle(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude "**/test/**"
    classpath = files()
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Use JUnit test framework for unit tests
    testImplementation 'junit:junit:4.12'
}

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'flashcards.greeting'
            implementationClass = 'flashcards.FlashcardsPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

jar {
    from {
        //configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtime.collect{zipTree(it)}
    }
    manifest {
        attributes 'Main-Class': "de.tud.cs.se.flashcards.Main"
    }
}